Order of tasks:

Step 1: Break down app into views. Determine look and functionality of each view in app.

Structure:
-App
-Nav
    -Home
    -Add
    -Leaderboard
    -Login
    -Logout


...


ToDos:
-Implement Login functionality and redirect user to login page if user is not logged in.
-Create functionality on question preview to obtain data from questions and populate correct areas with data
-Map through all questions in questions data and list them on home page passing data or question id to question preview.
-Implement add functionality allowing users to append their own questions to the questions in data following the form given in DATA.
-Extract data for leaderboardUser to show correct amount of q's asked and answered and display in Component
-Map through all users in data and list them on leaderboard, ordering them from most to least by using the .sort method on the object. Pass id to leaderboardUser to display correct info.
-Implement logout functionality, setting authedUser to null and redirecting to logout page.
-Add answer page which allows user to answer questions. Change state based on answer and increase number of answered questions. set questions to answered.

Order of tasks from now:
Use hardcoded value for login functionality for now to save faff of having to login every time page is reloaded. Implement this function last.

1. Create QuestionPreview functionality, obtaining data from database then displaying in correct areas.
    -api > reducer > action > handler > UI

2. Alter code to make repeatable list, reading data from state and presenting in a list of QuestionPreview components.
    - pass data to Home component for list of questions. Use variable to create array of id's and pass this as prop.
    - map across questions.keys taking the id from the key properties and passing that to QuestionPreview as a prop.
        - Alter mSTP in Question preview to use the id property passed to it rather than the hard coded value.
    - alter QuestionPreview to make code repeatable for incoming question data
    - sort using timestamp for correct order

3. Build add function, allowing the authedUser to add his own questions to the database or state.
    - User must input an A and B answer and then submit(button).
    - handler will call dispatch action which should be passed to reducer to be added to the store. The question should also be formatted using the method given in the DATA api. This should be done before being added to state.
    - action will also need to be called which adds the question id to the users list of questions.
    - once operation is done the user should be redirected back to the homepage and will see their question at the top of the pile.
    - order of events: user submits answers > handler dispatches async action with text values and authedUser > action sends api request to format the question > save question in api is dispatched > action is passed to reducer > user is redirected to home page.


4. Build answer function, have two clickable buttons for option A and option B with captions for each. User able to select choice.
    - Check will be done to see whether user has already answered question. If so buttons will be disabled and an alert will appear informing user.
    - User selects choice by clicking appropriate button. Each button will have tag for optionOne or optionTwo.
    - handler dispatches action with choice data included.
    - async action will send info to database changing following:
        - in users array, the users answers will have the question id and the chosen answer added.
        - in questions array, find the question with the matching id param, then alter optionOne or optionTwo depending on which user has chosen. Add users username to list of votes for that particular option.
    - reducer will inform store of changes and pass new data.
    - upon completion, user will receive an alert saying thanks for completing and then be redirected back to the homepage.